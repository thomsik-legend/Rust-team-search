# -*- coding: utf-8 -*-
# --------------------------------------------------------------
# Rust Match Bot ‚Äì –ø–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –≤ –∏–≥—Ä–µ Rust
# --------------------------------------------------------------
# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –±–µ—Ä—ë—Ç—Å—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN.
# –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –∑–∞–¥–∞–Ω–∞, –º–æ–∂–Ω–æ –≤–ø–∏—Å–∞—Ç—å —Ç–æ–∫–µ–Ω –≤—Ä—É—á–Ω—É—é,
# –Ω–æ –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ —Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –≤ Settings ‚Üí Variables.
# --------------------------------------------------------------

import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, CallbackQueryHandler, MessageHandler, Filters, CallbackContext
import sqlite3
from datetime import datetime

# -------------------- –¢–æ–∫–µ–Ω --------------------
BOT_TOKEN = os.getenv("BOT_TOKEN")  # –±–µ—Ä—ë–º –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not BOT_TOKEN:
    # –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –±—Ä–æ—Å–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã —Å—Ä–∞–∑—É —É–≤–∏–¥–µ—Ç—å –≤ –ª–æ–≥–∞—Ö
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω–∞! –£—Å—Ç–∞–Ω–æ–≤–∏ –µ—ë –≤ Railway ‚Üí Settings ‚Üí Variables")

# -------------------- –ö–æ–Ω—Ñ–∏–≥–∏ --------------------
MAX_DAILY_LIKES = 10  # –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –≤ —Å—É—Ç–∫–∏

# -------------------- –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö --------------------
class Database:
    def __init__(self, db_name="rust_match.db"):
        # check_same_thread=False –ø–æ–∑–≤–æ–ª—è–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤ —Ä–∞–∑–Ω—ã—Ö –ø–æ—Ç–æ–∫–∞—Ö Updater'–∞
        self.conn = sqlite3.connect(db_name, check_same_thread=False)
        self.create_tables()
    
    def create_tables(self):
        cur = self.conn.cursor()
        cur.execute('''
            CREATE TABLE IF NOT EXISTS profiles (
                user_id INTEGER PRIMARY KEY,
                username TEXT,
                nickname TEXT,
                experience TEXT,
                play_style TEXT,
                timezone TEXT,
                skills TEXT,
                description TEXT,
                photo_id TEXT
            )
        ''')
        cur.execute('''
            CREATE TABLE IF NOT EXISTS likes (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                liker_id INTEGER,
                liked_id INTEGER
            )
        ''')
        cur.execute('''
            CREATE TABLE IF NOT EXISTS daily_likes (
                user_id INTEGER,
                date DATE,
                count INTEGER DEFAULT 0,
                PRIMARY KEY (user_id, date)
            )
        ''')
        self.conn.commit()
    
    # ----- –ü—Ä–æ—Ñ–∏–ª—å -----
    def create_profile(self, user_id, data):
        cur = self.conn.cursor()
        cur.execute('''
            INSERT OR REPLACE INTO profiles
            (user_id, username, nickname, experience, play_style, timezone, skills, description, photo_id)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
        ''', (
            user_id, data.get('username'), data.get('nickname'), data.get('experience'),
            data.get('play_style'), data.get('timezone'), data.get('skills'),
            data.get('description'), data.get('photo_id')
        ))
        self.conn.commit()
    
    def get_profile(self, user_id):
        cur = self.conn.cursor()
        cur.execute('SELECT * FROM profiles WHERE user_id = ?', (user_id,))
        return cur.fetchone()
    
    def get_random_profile(self, exclude_user_id):
        cur = self.conn.cursor()
        cur.execute('''
            SELECT * FROM profiles
            WHERE user_id != ?
            AND user_id NOT IN (SELECT liked_id FROM likes WHERE liker_id = ?)
            ORDER BY RANDOM()
            LIMIT 1
        ''', (exclude_user_id, exclude_user_id))
        return cur.fetchone()
    
    # ----- –õ–∞–π–∫–∏ -----
    def add_like(self, liker_id, liked_id):
        cur = self.conn.cursor()
        cur.execute('INSERT INTO likes (liker_id, liked_id) VALUES (?, ?)', (liker_id, liked_id))
        self.conn.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∑–∞–∏–º–Ω—ã–π –ª–∞–π–∫
        cur.execute('SELECT * FROM likes WHERE liker_id = ? AND liked_id = ?', (liked_id, liker_id))
        return bool(cur.fetchone())
    
    # ----- –î–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç -----
    def get_daily_likes_count(self, user_id):
        cur = self.conn.cursor()
        today = datetime.now().date().isoformat()
        cur.execute('SELECT count FROM daily_likes WHERE user_id = ? AND date = ?', (user_id, today))
        row = cur.fetchone()
        return row[0] if row else 0
    
    def increment_daily_likes(self, user_id):
        cur = self.conn.cursor()
        today = datetime.now().date().isoformat()
        cur.execute('INSERT OR IGNORE INTO daily_likes (user_id, date) VALUES (?, ?)', (user_id, today))
        cur.execute('UPDATE daily_likes SET count = count + 1 WHERE user_id = ? AND date = ?', (user_id, today))
        self.conn.commit()

db = Database()

# -------------------- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã --------------------
def get_main_keyboard():
    keyboard = [
        ['üîç –ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞', 'üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å'],
        ['‚ù§Ô∏è –ú–æ–∏ –º—ç—Ç—á–∏', '‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏']
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# -------------------- –ö–æ–º–∞–Ω–¥—ã --------------------
def start(update: Update, context: CallbackContext):
    user = update.effective_user
    txt = f"""üéÆ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ **Rust Match Bot** ‚Äì –∏—â–µ–º –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤ –¥–ª—è –≤—ã–∂–∏–≤–∞–Ω–∏—è.

üõ†Ô∏è –ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, —Å–æ–∑–¥–∞–π –ø—Ä–æ—Ñ–∏–ª—å:
   /create

–î–∞–ª—å—à–µ ‚Äî –Ω–∞–∂–∏–º–∞–π –∫–Ω–æ–ø–∫–∏:
üîç –ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å
‚ù§Ô∏è –ú–æ–∏ –º—ç—Ç—á–∏
‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
"""
    update.message.reply_text(txt, parse_mode='Markdown', reply_markup=get_main_keyboard())

def create_profile(update: Update, context: CallbackContext):
    """–ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    context.user_data.clear()
    context.user_data['step'] = 'nickname'
    update.message.reply_text('üéÆ –ö–∞–∫–æ–π —É —Ç–µ–±—è –Ω–∏–∫ –≤ Rust? (–ø—Ä–∏–º–µ—Ä: xXProKillerXx)')

def handle_profile(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è."""
    user_id = update.effective_user.id
    text = update.message.text.strip()
    step = context.user_data.get('step')
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ñ–æ—Ç–æ –≤–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ ‚Äì –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º (–Ω–µ –Ω—É–∂–µ–Ω)
    if step == 'photo' and update.message.photo:
        # —Å–æ—Ö—Ä–∞–Ω—è–µ–º id —Ñ–æ—Ç–æ
        photo_id = update.message.photo[-1].file_id
        context.user_data['photo_id'] = photo_id
        finish_profile(update, context, user_id)
        return
    
    if step == 'photo' and text.lower() == '–Ω–µ—Ç':
        # –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç —Ñ–æ—Ç–æ
        context.user_data['photo_id'] = None
        finish_profile(update, context, user_id)
        return
    
    # --- –®–∞–≥–∏ –æ–ø—Ä–æ—Å–∞ ---
    if step == 'nickname':
        context.user_data['nickname'] = text
        context.user_data['step'] = 'experience'
        keyboard = [['–ù–æ–≤–∏—á–æ–∫', '–û–ø—ã—Ç–Ω—ã–π', '–ü—Ä–æ—Ñ–∏']]
        reply = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text('üèÜ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç –≤ Rust?', reply_markup=reply)
    
    elif step == 'experience':
        context.user_data['experience'] = text
        context.user_data['step'] = 'play_style'
        keyboard = [['–°–æ–ª–æ', '–î—É—ç—Ç', '–ö–ª–∞–Ω']]
        reply = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text('üë• –ß—Ç–æ —Ç—ã –∏—â–µ—à—å?', reply_markup=reply)
    
    elif step == 'play_style':
        context.user_data['play_style'] = text
        context.user_data['step'] = 'timezone'
        keyboard = [['–£—Ç—Ä–æ (6‚Äë12)', '–î–µ–Ω—å (12‚Äë18)', '–í–µ—á–µ—Ä (18‚Äë24)', '–ù–æ—á—å (0‚Äë6)']]
        reply = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
        update.message.reply_text('‚è∞ –ö–æ–≥–¥–∞ –æ–±—ã—á–Ω–æ –∏–≥—Ä–∞–µ—à—å?', reply_markup=reply)
    
    elif step == 'timezone':
        context.user_data['timezone'] = text
        context.user_data['step'] = 'skills'
        update.message.reply_text('üéØ –ö–∞–∫–∏–µ —É —Ç–µ–±—è –Ω–∞–≤—ã–∫–∏? (—Å—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ, PvP, –∫—Ä–∞—Ñ—Ç, —Å–±–æ—Ä —Ä–µ—Å—É—Ä—Å–æ–≤)')
    
    elif step == 'skills':
        context.user_data['skills'] = text
        context.user_data['step'] = 'description'
        update.message.reply_text('üìù –†–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ (—Ü–µ–ª–∏, —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫—É –∏ —Ç.–¥.)')
    
    elif step == 'description':
        context.user_data['description'] = text
        context.user_data['step'] = 'photo'
        update.message.reply_text('üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏ ¬´–Ω–µ—Ç¬ª)')
    
    else:
        # –ï—Å–ª–∏ –ø–æ–ø–∞–ª–∏ –≤ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —à–∞–≥ ‚Äì –ø—Ä–æ—Å—Ç–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º.
        pass

def finish_profile(update: Update, context: CallbackContext, user_id: int):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –≤ –ë–î –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –¥–∏–∞–ª–æ–≥."""
    data = {
        'username': update.effective_user.username,
        'nickname': context.user_data.get('nickname'),
        'experience': context.user_data.get('experience'),
        'play_style': context.user_data.get('play_style'),
        'timezone': context.user_data.get('timezone'),
        'skills': context.user_data.get('skills'),
        'description': context.user_data.get('description'),
        'photo_id': context.user_data.get('photo_id')
    }
    db.create_profile(user_id, data)
    context.user_data.clear()
    update.message.reply_text('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', reply_markup=get_main_keyboard())
    show_profile(update, context, user_id)

def show_profile(update: Update, context: CallbackContext, user_id: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –µ–≥–æ –∂–µ –ø—Ä–æ—Ñ–∏–ª—å."""
    p = db.get_profile(user_id)
    if not p:
        update.message.reply_text('‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ: /create')
        return
    
    txt = f'''üìõ <b>–ù–∏–∫:</b> {p[2]}
üèÜ <b>–û–ø—ã—Ç:</b> {p[3]}
üë• <b>–ò—â–µ—Ç:</b> {p[4]}
‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {p[5]}
üéØ <b>–ù–∞–≤—ã–∫–∏:</b> {p[6]}

üìù <b>–û —Å–µ–±–µ:</b>
{p[7]}'''
    
    if p[8]:  # —Ñ–æ—Ç–æ –µ—Å—Ç—å
        context.bot.send_photo(chat_id=update.effective_chat.id,
                               photo=p[8],
                               caption=txt,
                               parse_mode='HTML',
                               reply_markup=get_main_keyboard())
    else:
        update.message.reply_text(txt, parse_mode='HTML', reply_markup=get_main_keyboard())

def profile_cmd(update: Update, context: CallbackContext):
    """–ö–æ–º–∞–Ω–¥–∞ /profile ‚Äì –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å."""
    show_profile(update, context, update.effective_user.id)

def search(update: Update, context: CallbackContext):
    """–ü–æ–∏—Å–∫ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (—Å –ª–∞–π–∫–æ–º/–ø—Ä–æ–ø—É—Å–∫–æ–º)."""
    user_id = update.effective_user.id
    
    # –ø—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤
    if db.get_daily_likes_count(user_id) >= MAX_DAILY_LIKES:
        update.message.reply_text(f'‚ùå –í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –¥–Ω–µ–≤–Ω–æ–π –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ ({MAX_DAILY_LIKES}). –ó–∞–≤—Ç—Ä–∞ –±—É–¥–µ—Ç —Å–Ω–æ–≤–∞.')
        return
    
    profile = db.get_random_profile(user_id)
    if not profile:
        update.message.reply_text('üì≠ –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
        return
    
    txt = f'''üéÆ <b>–ù–∏–∫:</b> {profile[2]}
üèÜ <b>–û–ø—ã—Ç:</b> {profile[3]}
üë• <b>–ò—â–µ—Ç:</b> {profile[4]}
‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {profile[5]}
üéØ <b>–ù–∞–≤—ã–∫–∏:</b> {profile[6]}

üìù <b>–û —Å–µ–±–µ:</b>
{profile[7]}'''
    
    keyboard = [[
        InlineKeyboardButton('‚ù§Ô∏è –ù—Ä–∞–≤–∏—Ç—Å—è', callback_data=f'like_{profile[0]}'),
        InlineKeyboardButton('‚è≠Ô∏è –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data=f'skip_{profile[0]}')
    ]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if profile[8]:
        context.bot.send_photo(chat_id=update.effective_chat.id,
                               photo=profile[8],
                               caption=txt,
                               parse_mode='HTML',
                               reply_markup=reply_markup)
    else:
        update.message.reply_text(txt, parse_mode='HTML', reply_markup=reply_markup)

def button_handler(update: Update, context: CallbackContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ª–∞–π–∫/–ø—Ä–æ–ø—É—Å–∫."""
    query = update.callback_query
    user_id = query.from_user.id
    action, target_id_str = query.data.split('_')
    target_id = int(target_id_str)
    
    if action == 'like':
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞
        if db.get_daily_likes_count(user_id) >= MAX_DAILY_LIKES:
            query.answer('‚ùå –õ–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω!')
            return
        
        db.increment_daily_likes(user_id)
        is_match = db.add_like(user_id, target_id)
        if is_match:
            query.answer('üéâ –í–∑–∞–∏–º–Ω—ã–π –º—ç—Ç—á!')
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–±–æ–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            context.bot.send_message(user_id,
                                     f'üéâ –í—ã –Ω–∞—à–ª–∏ –º—ç—Ç—á —Å {db.get_profile(target_id)[2]}! –ü–∏—à–∏—Ç–µ –≤ —á–∞—Ç.')
            context.bot.send_message(target_id,
                                     f'üéâ –í—ã –Ω–∞—à–ª–∏ –º—ç—Ç—á —Å {db.get_profile(user_id)[2]}! –ü–∏—à–∏—Ç–µ –≤ —á–∞—Ç.')
        else:
            query.answer('üëç –õ–∞–π–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω')
    
    elif action == 'skip':
        query.answer('‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ')
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–æ—á–∫–æ–π (—á–∏—Å—Ç—ã–π UI)
    query.message.delete()
    # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    search(update, context)

def matches(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –º—ç—Ç—á–µ–π."""
    user_id = update.effective_user.id
    cur = db.conn.cursor()
    cur.execute('''
        SELECT p.* FROM (
            SELECT user1_id AS uid FROM matches WHERE user2_id = ?
            UNION
            SELECT user2_id AS uid FROM matches WHERE user1_id = ?
        ) AS m
        JOIN profiles p ON p.user_id = m.uid
    ''', (user_id, user_id))
    rows = cur.fetchall()
    
    if not rows:
        update.message.reply_text('üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –º—ç—Ç—á–µ–π. –ò—â–∏—Ç–µ –¥–∞–ª—å—à–µ! üéØ')
        return
    
    update.message.reply_text(f'‚ù§Ô∏è –£ –≤–∞—Å {len(rows)} –º—ç—Ç—á–µ–π:')
    
    for p in rows:
        txt = f'''üéÆ <b>–ù–∏–∫:</b> {p[2]}
üèÜ <b>–û–ø—ã—Ç:</b> {p[3]}
üë• <b>–ò—â–µ—Ç:</b> {p[4]}
‚è∞ <b>–í—Ä–µ–º—è –∏–≥—Ä—ã:</b> {p[5]}
üéØ <b>–ù–∞–≤—ã–∫–∏:</b> {p[6]}

üìù <b>–û —Å–µ–±–µ:</b>
{p[7]}'''
        if p[8]:
            context.bot.send_photo(chat_id=update.effective_chat.id,
                                   photo=p[8],
                                   caption=txt,
                                   parse_mode='HTML')
        else:
            update.message.reply_text(txt, parse_mode='HTML')

def settings(update: Update, context: CallbackContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ—Å—Ç—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ (–ø–æ–∫–∞ —Ç–æ–ª—å–∫–æ —Å–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞)."""
    keyboard = [[InlineKeyboardButton('üîÑ –°–±—Ä–æ—Å–∏—Ç—å –ª–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è)', callback_data='reset_likes')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text('‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞', reply_markup=reply_markup)

def settings_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    if query.data == 'reset_likes':
        # –°–±—Ä–æ—Å–∏–º —Å—á—ë—Ç—á–∏–∫ —Ç–æ–ª—å–∫–æ —É –≤—ã–∑—ã–≤–∞—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cur = db.conn.cursor()
        today = datetime.now().date().isoformat()
        cur.execute('DELETE FROM daily_likes WHERE user_id = ? AND date = ?', (query.from_user.id, today))
        db.conn.commit()
        query.answer('üîÑ –õ–∏–º–∏—Ç –ª–∞–π–∫–æ–≤ —Å–±—Ä–æ—à–µ–Ω')
        query.message.delete()
    else:
        query.answer('‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞')

# -------------------- –ó–∞–ø—É—Å–∫ --------------------
def main():
    updater = Updater(BOT_TOKEN, use_context=True)
    dp = updater.dispatcher
    
    # –ö–æ–º–∞–Ω–¥—ã
    dp.add_handler(CommandHandler('start', start))
    dp.add_handler(CommandHandler('create', create_profile))
    dp.add_handler(CommandHandler('profile', profile_cmd))
    dp.add_handler(CommandHandler('search', search))
    dp.add_handler(CommandHandler('matches', matches))
    dp.add_handler(CommandHandler('settings', settings))
    
    # –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è ‚Äì —á–∞—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    dp.add_handler(MessageHandler(Filters.text & ~Filters.command, handle_profile))
    dp.add_handler(MessageHandler(Filters.photo, handle_profile))
    
    # Inline‚Äë–∫–Ω–æ–ø–∫–∏
    dp.add_handler(CallbackQueryHandler(button_handler, pattern='^(like|skip)_'))
    dp.add_handler(CallbackQueryHandler(settings_callback, pattern='^reset_likes$'))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    updater.start_polling()
    print('üöÇ Bot started!')   # –±—É–¥–µ—Ç –≤–∏–¥–Ω–æ –≤ –ª–æ–≥–∞—Ö Railway
    updater.idle()

if __name__ == '__main__':
    main()
