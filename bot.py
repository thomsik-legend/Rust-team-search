import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            name TEXT,
            bio TEXT,
            level TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –õ–∞–π–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS likes (
            from_id INTEGER,
            to_id INTEGER,
            PRIMARY KEY (from_id, to_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(telegram_id, name, bio, level):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (telegram_id, name, bio, level)
        VALUES (?, ?, ?, ?)
    ''', (telegram_id, name, bio, level))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_random_user(exclude_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT telegram_id, name, bio, level FROM users
        WHERE telegram_id != ?
        ORDER BY RANDOM() LIMIT 1
    ''', (exclude_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—á
def is_match(user_id, partner_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ª–∞–π–∫–Ω—É–ª –ª–∏ partner user_id
    cursor.execute('SELECT 1 FROM likes WHERE from_id = ? AND to_id = ?', (partner_id, user_id))
    liked_back = cursor.fetchone() is not None
    
    conn.close()
    return liked_back

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫
def add_like(from_id, to_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO likes (from_id, to_id) VALUES (?, ?)', (from_id, to_id))
    conn.commit()
    conn.close()

# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ ID
def get_user_profile(telegram_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, bio, level FROM users WHERE telegram_id = ?', (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –ø–æ Rust.\n\n"
        "–ù–∞–ø–∏—à–∏, –∫—Ç–æ —Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∏–∑—É—á–∞—é Rust, –∏—â—É –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤):"
    )
    context.user_data['step'] = 'bio'

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    step = context.user_data.get('step')

    if step == 'bio':
        context.user_data['bio'] = text
        await update.message.reply_text(
            "üéØ –£–∫–∞–∂–∏ —Å–≤–æ–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π Rust:\n"
            "‚Ä¢ –ù–æ–≤–∏—á–æ–∫\n"
            "‚Ä¢ –°—Ä–µ–¥–Ω–∏–π\n"
            "‚Ä¢ –≠–∫—Å–ø–µ—Ä—Ç"
        )
        context.user_data['step'] = 'level'
    
    elif step == 'level':
        context.user_data['level'] = text
        save_user(user.id, user.first_name, text, context.user_data['bio'])
        
        await update.message.reply_text(
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!\n\n"
            "–ö–æ–º–∞–Ω–¥—ã:\n"
            "/find - –Ω–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞\n"
            "/profile - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
        )
        context.user_data['step'] = None

# –ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
async def find_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    partner = get_random_user(user.id)
    
    if not partner:
        await update.message.reply_text("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    context.user_data['current_partner_id'] = partner[0]
    
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{partner[0]}"),
            InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{partner[0]}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üë§ –ù–∞–π–¥–µ–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫:\n\n"
        f"üìõ –ò–º—è: {partner[1]}\n"
        f"üìñ –û —Å–µ–±–µ: {partner[2]}\n"
        f"üîß –£—Ä–æ–≤–µ–Ω—å: {partner[3]}",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    data = query.data.split('_')
    action = data[0]
    partner_id = int(data[1])
    user_id = query.from_user.id
    
    if action == 'like':
        add_like(user_id, partner_id)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—á
        if is_match(user_id, partner_id):
            partner_profile = get_user_profile(partner_id)
            if partner_profile:
                await query.edit_message_text(
                    f"üéâ –£–†–ê! –£ –≤–∞—Å –ú–ê–¢–ß!\n\n"
                    f"üî• –ù–∞–ø–∞—Ä–Ω–∏–∫: {partner_profile[0]}\n"
                    f"üí¨ {partner_profile[1]}\n"
                    f"üéØ –£—Ä–æ–≤–µ–Ω—å: {partner_profile[2]}\n\n"
                    f"üîó –ù–∞–ø–∏—Å–∞—Ç—å –µ–º—É: t.me/{query.from_user.username or 'username_not_set'}"
                )
            else:
                await query.edit_message_text("üéâ –£ –≤–∞—Å –º–∞—Ç—á! –ù–æ –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        else:
            await query.edit_message_text("‚ù§Ô∏è –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫! –ò—â–µ–º –¥–∞–ª—å—à–µ...")
            await find_partner_after_action(query, context, user_id)
    
    elif action == 'dislike':
        await query.edit_message_text("üëé –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫. –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
        await find_partner_after_action(query, context, user_id)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
async def find_partner_after_action(query, context, user_id):
    partner = get_random_user(user_id)
    if not partner:
        await context.bot.send_message(chat_id=user_id, text="üò¢ –ë–æ–ª—å—à–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return
    
    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{partner[0]}"),
            InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{partner[0]}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await context.bot.send_message(
        chat_id=user_id,
        text=f"üë§ –°–ª–µ–¥—É—é—â–∏–π –Ω–∞–ø–∞—Ä–Ω–∏–∫:\n\n"
             f"üìõ –ò–º—è: {partner[1]}\n"
             f"üìñ –û —Å–µ–±–µ: {partner[2]}\n"
             f"üîß –£—Ä–æ–≤–µ–Ω—å: {partner[3]}",
        reply_markup=reply_markup
    )

# –ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è
async def profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    profile_data = get_user_profile(user.id)
    
    if profile_data:
        await update.message.reply_text(
            f"üìã –¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
            f"üìõ –ò–º—è: {profile_data[0]}\n"
            f
