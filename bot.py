import os
import logging
import sqlite3
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters, ReplyKeyboardMarkup

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS users (
            telegram_id INTEGER PRIMARY KEY,
            name TEXT,
            hours INTEGER,
            age INTEGER,
            bio TEXT,
            username TEXT,
            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    
    # –õ–∞–π–∫–∏
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS likes (
            from_id INTEGER,
            to_id INTEGER,
            PRIMARY KEY (from_id, to_id)
        )
    ''')
    
    conn.commit()
    conn.close()

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def save_user(telegram_id, name, hours, age, bio, username):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        INSERT OR REPLACE INTO users (telegram_id, name, hours, age, bio, username)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (telegram_id, name, hours, age, bio, username))
    conn.commit()
    conn.close()

# –ü—Ä–æ–≤–µ—Ä–∫–∞, –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ –ª–∏ –∞–Ω–∫–µ—Ç–∞
def is_profile_complete(telegram_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM users WHERE telegram_id = ?', (telegram_id,))
    row = cursor.fetchone()
    conn.close()
    return row is not None

# –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
def get_user_profile(telegram_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT name, hours, age, bio, username FROM users WHERE telegram_id = ?', (telegram_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_random_user(exclude_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT telegram_id, name, hours, age, bio, username FROM users
        WHERE telegram_id != ?
        ORDER BY RANDOM() LIMIT 1
    ''', (exclude_id,))
    user = cursor.fetchone()
    conn.close()
    return user

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –º–∞—Ç—á
def is_match(user_id, partner_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('SELECT 1 FROM likes WHERE from_id = ? AND to_id = ?', (partner_id, user_id))
    liked_back = cursor.fetchone() is not None
    conn.close()
    return liked_back

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–∞–π–∫
def add_like(from_id, to_id):
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('INSERT OR IGNORE INTO likes (from_id, to_id) VALUES (?, ?)', (from_id, to_id))
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ç—á
    cursor.execute('SELECT 1 FROM likes WHERE from_id = ? AND to_id = ?', (to_id, from_id))
    is_match_found = cursor.fetchone() is not None
    
    conn.commit()
    conn.close()
    
    return is_match_found

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∞–π–∫–µ
async def notify_user_about_like(context: ContextTypes.DEFAULT_TYPE, to_user_id, liker_name):
    try:
        await context.bot.send_message(
            chat_id=to_user_id,
            text=f"‚ù§Ô∏è –ö—Ç–æ-—Ç–æ –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫ —Ç–≤–æ–µ–π –∞–Ω–∫–µ—Ç–µ!\n"
                 f"–≠—Ç–æ {liker_name} ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏ –∏ —Ç—ã!"
        )
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ {to_user_id}: {e}")

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –º–∞—Ç—á–µ
async def notify_users_about_match(context: ContextTypes.DEFAULT_TYPE, user_id, partner_id):
    user_profile = get_user_profile(user_id)
    partner_profile = get_user_profile(partner_id)
    
    if not user_profile or not partner_profile:
        return

    name1, _, _, _, username1 = user_profile
    name2, _, _, _, username2 = partner_profile

    link1 = f"@{username1}" if username1 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
    link2 = f"@{username2}" if username2 else "–Ω–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"

    try:
        await context.bot.send_message(
            chat_id=user_id,
            text=f"üéâ –£–†–ê! –£ –≤–∞—Å –ú–ê–¢–ß!\n\n"
                 f"üî• –ù–∞–ø–∞—Ä–Ω–∏–∫: {name2}\n"
                 f"üí¨ {link2}\n\n"
                 f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É!"
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Ç—á–∞ {user_id}: {e}")

    try:
        await context.bot.send_message(
            chat_id=partner_id,
            text=f"üéâ –£–†–ê! –£ –≤–∞—Å –ú–ê–¢–ß!\n\n"
                 f"üî• –ù–∞–ø–∞—Ä–Ω–∏–∫: {name1}\n"
                 f"üí¨ {link1}\n\n"
                 f"–ù–∞–ø–∏—à–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É!"
        )
    except Exception as e:
        logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–∞—Ç—á–∞ {partner_id}: {e}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –ø–æ Rust", callback_data="find_partner")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –ø–æ–º–æ–≥—É –Ω–∞–π—Ç–∏ —Ç–µ–±–µ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ –ø–æ Rust.",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏
async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == "find_partner":
        if not is_profile_complete(query.from_user.id):
            await query.message.reply_text(
                "üìù –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –∞–Ω–∫–µ—Ç—É!\n\n"
                "–°–∫–æ–ª—å–∫–æ —á–∞—Å–æ–≤ —Ç—ã —É–∂–µ –æ—Ç–∫–∞—Ç–∞–ª –≤ Rust?"
            )
            context.user_data['step'] = 'hours'
        else:
            await find_partner(update, context)
    
    elif query.data.startswith("like_") or query.data.startswith("dislike_"):
        await handle_like_dislike(query, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    text = update.message.text
    step = context.user_data.get('step')

    if step == 'hours':
        try:
            hours = int(text)
            if hours < 0:
                raise ValueError()
            context.user_data['hours'] = hours
            await update.message.reply_text("üìÖ –£–∫–∞–∂–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç:")
            context.user_data['step'] = 'age'
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 50)")
    
    elif step == 'age':
        try:
            age = int(text)
            if age < 10 or age > 100:
                raise ValueError()
            context.user_data['age'] = age
            await update.message.reply_text("üí¨ –ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –æ —Å–µ–±–µ (–æ —Å–≤–æ–∏—Ö —Ü–µ–ª—è—Ö, —Å—Ç–∏–ª–µ –∏–≥—Ä—ã –∏ —Ç.–¥.):")
            context.user_data['step'] = 'bio'
        except:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25)")
    
    elif step == 'bio':
        context.user_data['bio'] = text
        user_data = context.user_data
        
        save_user(
            user.id, user.first_name,
            user_data['hours'], user_data['age'],
            user_data['bio'], user.username
        )
        
        await update.message.reply_text("‚úÖ –ê–Ω–∫–µ—Ç–∞ –≥–æ—Ç–æ–≤–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –∏—Å–∫–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤.")
        context.user_data['step'] = None
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –∫–Ω–æ–ø–∫—É –ø–æ–∏—Å–∫–∞
        keyboard = [[InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞", callback_data="find_partner")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text("–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?", reply_markup=reply_markup)

# –ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
# –ü–æ–∏—Å–∫ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞ (—Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º –ø–æ—Ö–æ–∂–∏—Ö)
async def find_partner(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    
    # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_profile = get_user_profile(user.id)
    if not user_profile:
        await update.effective_message.reply_text("‚ùå –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∞–Ω–∫–µ—Ç—É!")
        return

    current_hours = user_profile[2]  # —á–∞—Å—ã –≤ Rust
    current_age = user_profile[3]    # –≤–æ–∑—Ä–∞—Å—Ç

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    conn = sqlite3.connect('users.db')
    cursor = conn.cursor()
    cursor.execute('''
        SELECT telegram_id, name, hours, age, bio, username 
        FROM users 
        WHERE telegram_id != ?
    ''', (user.id,))
    all_partners = cursor.fetchall()
    conn.close()

    if not all_partners:
        await update.effective_message.reply_text("üò¢ –ü–æ–∫–∞ –Ω–µ—Ç –¥—Ä—É–≥–∏—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
        return

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ "–±–ª–∏–∑–æ—Å—Ç–∏": —Å–Ω–∞—á–∞–ª–∞ –ø–æ —á–∞—Å–∞–º, –ø–æ—Ç–æ–º –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É
    def get_similarity(partner):
        partner_id, name, hours, age, bio, username = partner
        hours_diff = abs(hours - current_hours)
        age_diff = abs(age - current_age)
        # –í–µ—Å–∞: –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —á–∞—Å—ã –≤–∞–∂–Ω–µ–µ –≤–æ–∑—Ä–∞—Å—Ç–∞)
        return hours_diff * 1 + age_diff * 1  # —á–µ–º –º–µ–Ω—å—à–µ ‚Äî —Ç–µ–º –±–ª–∏–∂–µ

    sorted_partners = sorted(all_partners, key=get_similarity)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–ø–∏—Å–æ–∫ –≤ user_data
    context.user_data['partner_queue'] = [p[0] for p in sorted_partners]  # —Å–ø–∏—Å–æ–∫ telegram_id
    context.user_data['current_partner_list'] = {p[0]: p for p in sorted_partners}  # –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ
    partner = sorted_partners[0]
    await show_partner(update, context, partner)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∞–π–∫–∞/–¥–∏–∑–ª–∞–π–∫–∞
async def handle_like_dislike(query, context: ContextTypes.DEFAULT_TYPE):
    data = query.data.split('_')
    action = data[0]
    partner_id = int(data[1])
    user_id = query.from_user.id
    user_name = query.from_user.first_name

    if action == 'like':
        is_match_found = add_like(user_id, partner_id)
        
        if is_match_found:
            await query.edit_message_text("üéâ –£ –≤–∞—Å –í–ó–ê–ò–ú–ù–´–ô –ú–ê–¢–ß! –û–±–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω—ã.")
            await notify_users_about_match(context, user_id, partner_id)
        else:
            await query.edit_message_text("‚ù§Ô∏è –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –ª–∞–π–∫! –ò—â–µ–º –¥–∞–ª—å—à–µ...")
            await notify_user_about_like(context, partner_id, user_name)
            await find_partner_after_action(query, context, user_id)
    
    elif action == 'dislike':
        await query.edit_message_text("üëé –¢—ã –ø–æ—Å—Ç–∞–≤–∏–ª –¥–∏–∑–ª–∞–π–∫. –ò—â–µ–º —Å–ª–µ–¥—É—é—â–µ–≥–æ...")
        await find_partner_after_action(query, context, user_id)

# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –ø–æ—Å–ª–µ –¥–µ–π—Å—Ç–≤–∏—è
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ —Å–ª–µ–¥—É—é—â–µ–≥–æ –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
async def find_partner_after_action(query, context, user_id):
    queue = context.user_data.get('partner_queue', [])
    
    if not queue:
        await context.bot.send_message(chat_id=user_id, text="üéâ –¢—ã –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª –≤—Å–µ—Ö –Ω–∞–ø–∞—Ä–Ω–∏–∫–æ–≤!")
        return

    next_id = queue.pop(0)  # –ë–µ—Ä—ë–º —Å–ª–µ–¥—É—é—â–µ–≥–æ
    context.user_data['partner_queue'] = queue

    partner_data = context.user_data['current_partner_list'].get(next_id)
    if partner_data:
        await show_partner(query, context, partner_data)
    else:
        await find_partner_after_action(query, context, user_id)  # –†–µ–∫—É—Ä—Å–∏—è, –µ—Å–ª–∏ –Ω–µ—Ç

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    init_db()
    TOKEN = os.getenv("TELEGRAM_TOKEN")
    
    if not TOKEN:
        logger.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω TELEGRAM_TOKEN")
        return

    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
# –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–∞—Ä–Ω–∏–∫–∞
async def show_partner(update: Update, context: ContextTypes.DEFAULT_TYPE, partner):
    partner_id, name, hours, age, bio, username = partner

    context.user_data['current_partner_id'] = partner_id

    keyboard = [
        [
            InlineKeyboardButton("‚ù§Ô∏è –õ–∞–π–∫", callback_data=f"like_{partner_id}"),
            InlineKeyboardButton("üëé –î–∏–∑–ª–∞–π–∫", callback_data=f"dislike_{partner_id}")
        ]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.effective_message.reply_text(
        f"üë§ –ù–∞–π–¥–µ–Ω –Ω–∞–ø–∞—Ä–Ω–∏–∫:\n\n"
        f"üìõ –ò–º—è: {name}\n"
        f"‚è∞ –ß–∞—Å–æ–≤ –≤ Rust: {hours}\n"
        f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {age}\n"
        f"üí¨ –û —Å–µ–±–µ: {bio}",
        reply_markup=reply_markup
    )
if __name__ == '__main__':
    main()
